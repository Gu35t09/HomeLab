---
username: mattia

password: changeme

shell: /bin/bash

packages:
  - neovim
  - htop
  - neofetch
  - tmux
  - btrbk #Swiss handknife-like tool to automate snapshots & backups of personal data
  - mbuffer #a tool for buffering data streams with a large set of unique features
  - rsync
  - s-nail
  - ssmtp
  - powertop
  - fail2ban
  - python3-docker
  - apache2-utils
  - smartmontools 

#-------------------------------------------------------------------------------------------------------------------------

#SSH security and config
security_ssh_port: 22
security_ssh_password_authentication: "no"
security_ssh_permit_root_login: "no"
security_ssh_usedns: "no"
security_ssh_permit_empty_password: "no"
security_ssh_gss_api_authentication: "no"
security_ssh_x11_forwarding: "no"
security_ssh_restart_handler_state: restarted
security_ssh_allowed_users: [mattia]
security_ssh_allowed_groups: [mattia]
security_sudoers_passwordless: [mattia]

#-------------------------------------------------------------------------------------------------------------------------

#Install docker, docker-plugin and best pratices

docker_packages:
  - docker

# Edition can be one of: 'ce' (Community Edition) or 'ee' (Enterprise Edition).
docker_edition: 'ce'
docker_packages:
  - "docker-{{ docker_edition }}"
  - "docker-{{ docker_edition }}-cli"
  - "docker-{{ docker_edition }}-rootless-extras"
  - "containerd.io"
docker_packages_state: present

# Service options.
docker_service_manage: true
docker_service_state: started
docker_service_enabled: true
docker_restart_handler_state: restarted

# Docker Compose Plugin options.
docker_install_compose_plugin: false
docker_compose_package: docker-compose-plugin
docker_compose_package_state: present

# Docker Compose options.
docker_install_compose: true
docker_compose_version: "v2.11.1"
docker_compose_arch: "{{ ansible_architecture }}"
docker_compose_url: "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-linux-{{ docker_compose_arch }}"
docker_compose_path: /usr/local/bin/docker-compose

# Enable repo setup
docker_add_repo: true

# Docker repo URL.
docker_repo_url: https://download.docker.com/linux

# Used only for Debian/Ubuntu. Switch 'stable' to 'nightly' if needed.
docker_apt_release_channel: stable
docker_apt_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}"
docker_apt_repository: "deb [arch={{ docker_apt_arch }} signed-by=/etc/apt/trusted.gpg.d/docker.asc] {{ docker_repo_url }}/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} {{ docker_apt_release_channel }}"
docker_apt_ignore_key_error: true
docker_apt_gpg_key: "{{ docker_repo_url }}/{{ ansible_distribution | lower }}/gpg"
docker_apt_gpg_key_checksum: "sha256:1500c1f56fa9e26b9b8f42452a553675796ade0807cdce11975eb98170b3a570"

services:
 - portainer

#-------------------------------------------------------------------------------------------------------------------------

#Enable and configure unattended-packages

# Cache update time for apt module
unattended_cache_valid_time: '3600'

#Unattended-Upgrade::AutoFixInterruptedDpkg
# On a unclean dpkg exit unattended-upgrades will run
#   dpkg --force-confold --configure -a
# The default is true, to ensure updates keep getting installed
unattended_autofix_interrupted_dpkg: true

#Unattended-Upgrade::MinimalSteps
# Split the upgrade into the smallest possible chunks so that
# they can be interrupted with SIGUSR1. This makes the upgrade
# a bit slower but it has the benefit that shutdown while a upgrade
# is running is possible (with a small delay)
unattended_minimal_steps: true

#Unattended-Upgrade::InstallOnShutdown
# Install all unattended-upgrades when the machine is shuting down
# instead of doing it in the background while the machine is running
# This will (obviously) make shutdown slower
unattended_install_on_shutdown: false

#Unattended-Upgrade::Mail
# Send email to this address for problems or packages upgrades
# If empty or unset then no email is sent, make sure that you
# have a working mail setup on your system. A package that provides
# 'mailx' must be installed.
unattended_mail: false
unattended_mail_only_on_error: false

#Unattended-Upgrade::Remove-Unused-Dependencies
# Do automatic removal of all unused dependencies after the upgrade
# (equivalent to apt-get autoremove)
unattended_remove_unused_dependencies: false
unattended_remove_new_unused_dependencies: true

unattended_automatic_reboot: true
unattended_automatic_reboot_time: '08:00'

# Do upgrade application even if it requires restart after upgrade
unattended_ignore_apps_require_restart: true

unattended_syslog_enable: false

#APT::Periodic::Update-Package-Lists "0"
unattended_update_package_list: 1

#APT::Periodic::AutocleanInterval "0";
unattended_autoclean_interval: 7

unattended_only_on_ac_power: false

#-------------------------------------------------------------------------------------------------------------------------------

#NTP vars
toplevel_timeservers: ['time1.google.com']